
-- File: pl_sql_chapter_6.sql_

-- control tructure 
    1.conditional statement
        --  a.if then
        --  b.if then else
        --  c.if then elsif else
    2.looping statement
        -- a.basic loop
        -- b.while loop
        -- c.for loop
    3.case statement   
        -- a.case expression
                i.case expression
                ii.case searched expression
        -- b.case statement                   --use in pl/sql not in sql 
                i.case statement
                ii.case searched statement
        



--  how to write 
-- if then 
-- control stucture in pl/sql


DECLARE
    v_salary number :=5000;
begin
    if v_salary <7000 then
        dbms_output.put_line('My salary is less than 7000' );
    end if;
end;
/


--  how to write 
-- if then else 
-- control stucture in pl/sql

DECLARE
    v_salary number :=5000;
begin
    if v_salary <7000 then
        dbms_output.put_line('My salary is less than 7000');
        else
       dbms_output.put_line('My salary is greater  than 7000');
       end if;
end;
/



--  how to write 
-- if then elsif else 
-- control stucture in pl/sql

DECLARE 
v_salary number :=5000;
begin
    if v_salary < 3000 then
    dbms_output.put_line('My salary is less than 3000');
    elsif v_salary <4000 then
    dbms_output.put_line('My salary is less than 4000');
    elsif v_salary <5000 then
    dbms_output.put_line('My salary is less than 5000');
    elsif v_salary <6000 then
    dbms_output.put_line('My salary is less than 6000');
    else
    dbms_output.put_line('My salary is greater than 6000');
    end if;
end;
/



--  how to write 
-- basic loop                           --condition in the end point of loop
-- control stucture in pl/sql
DECLARE
v_num NUMBER := 1;
begin
    loop   --loop
        dbms_output.put_line('The number is ' || v_num); --statement
        v_num := v_num + 1; --increment storage
        exit when v_num > 5; --condition by exist 
        end loop; --end loop
end;
/



--  how to write 
-- while loop                 --condition in the start point of loop
-- control stucture in pl/sql


DECLARE
    v_num NUMBER := 1;
begin
    while  v_num < 5    --condition by while
    loop     --loop
        dbms_output.put_line('The number is ' || v_num); --statement
        v_num := v_num + 1; --increment storage
    end loop; --end loop
end;
/


--  how to write 
-- for loop                 --condition in the between(start point and end point) 
-- control stucture in pl/sql



DECLARE
    -- v_num NUMBER := 1;  no need to declare variable
begin
    for v_num in 1..5    --condition by between (start point and end point )
    loop     --loop
        dbms_output.put_line('The number is ' || v_num); --statement
        -- v_num := v_num + 1; --increment storage no need 
    end loop; --end loop
end;
/

--  how to write 
-- case expression   --we can not use condition operator like <,>,<=,>=,!=,between  
-- control stucture in pl/sql


SELECT last_name,
       job_id,
       salary,
       CASE salary  --add column name
            WHEN 3000 THEN 'Low'
            WHEN 9000 THEN 'Medium'
            WHEN 15000 THEN 'Good'
            ELSE 'Excellent'
       END 
       AS qualified_salary
FROM employees;

--  how to write 
-- searched  case expression   --we can use condition operator like <,>,<=,>=,!=,between  
-- control stucture in pl/sql
SELECT salary,
       CASE
            WHEN salary < 5000 THEN 'Low'
            WHEN salary BETWEEN 5000 AND 10000 THEN 'Medium'
            WHEN salary BETWEEN 10001 AND 15000 THEN 'Good'
            ELSE 'Excellent'
       END AS qualified_salary
FROM employees;

--  how to write 
--  case statement   
-- control stucture in pl/sql
DECLARE
   v_salary NUMBER := 9000;
BEGIN
   CASE v_salary
      WHEN 3000 THEN DBMS_OUTPUT.PUT_LINE('Low');
      WHEN 9000 THEN DBMS_OUTPUT.PUT_LINE('Medium');
      WHEN 15000 THEN DBMS_OUTPUT.PUT_LINE('Good');
      ELSE DBMS_OUTPUT.PUT_LINE('Excellent');
   END CASE;
END;
/


--  how to write 
--  searched case statement   
-- control stucture in pl/sql


DECLARE
   v_salary NUMBER := 12000;
BEGIN
   CASE
      WHEN v_salary < 5000 THEN DBMS_OUTPUT.PUT_LINE('Low');
      WHEN v_salary BETWEEN 5000 AND 10000 THEN DBMS_OUTPUT.PUT_LINE('Medium');
      WHEN v_salary BETWEEN 10001 AND 15000 THEN DBMS_OUTPUT.PUT_LINE('Good');
      ELSE DBMS_OUTPUT.PUT_LINE('Excellent');
   END CASE;
END;
/



--practice in book


declare
v_myage number :=45;
begin 
    if v_myage < 18 then
        dbms_output.put_line('I am a teenager');
    end if;
end;
/


declare
v_myage number :=45;
begin 
    if v_myage < 18 then
        dbms_output.put_line('I am a teenager');
    else
        dbms_output.put_line('I am an adult');
    end if;
end;
/


declare
v_myage number :=45;
begin 
    if v_myage < 18 then
        dbms_output.put_line('I am a teenager');
    elsif v_myage < 25 then
        dbms_output.put_line('I am a adult');
    elsif v_myage < 35 then
        dbms_output.put_line('I am a man');
    else
        dbms_output.put_line('I am a middle aged');
    end if;
end;
/


create table loc 
(location_id number,
city varchar2(50),
country_id varchar2(50));


insert into
loc 
values(1000,'Mexico City', 'MX');

insert into
loc 
values(1100,'Oxford', 'UK');

insert into
loc 
values(1200,'Montreal', 'CA');

SELECT MAX(location_id)FROM LOC 
WHERE country_id='CA';

-- case expression and case statement -----------
 


-- loop ---------------------
-- insert data by basic loop 
DECLARE
v_counter number :=1;
v_loc_id loc.location_id%TYPE;
v_country_id loc.country_id%TYPE := 'CA';
v_new_city loc.city%TYPE := 'Montreal';
begin
select max(location_id) into v_loc_id from loc
where country_id =v_country_id;
loop
insert into loc(location_id,city,country_id)
values(v_loc_id+v_counter,v_new_city,v_country_id);
v_counter := v_counter +1;
exit when v_counter >5;

dbms_output.put_line(v_loc_id || ' ' || v_country_id || ' ' || v_new_city);
dbms_output.put_line('Inserted ' || v_counter || ' rows');
end loop;
end;
/

-- insert data by while loop 

DECLARE
v_counter number :=1;
v_loc_id loc.location_id%TYPE;
v_country_id loc.country_id%TYPE := 'CA';
v_new_city loc.city%TYPE := 'Montreal';
begin
select max(location_id) into v_loc_id from loc
where country_id =v_country_id;
while v_counter <5
loop
insert into loc(location_id,city,country_id)
values(v_loc_id+v_counter,v_new_city,v_country_id);
v_counter := v_counter +1;

dbms_output.put_line(v_loc_id || ' ' || v_country_id || ' ' || v_new_city);
dbms_output.put_line('Inserted ' || v_counter || ' rows');
end loop;
end;
/

-- insert data by for loop 


DECLARE
v_counter number :=1;
v_loc_id loc.location_id%TYPE;
v_country_id loc.country_id%TYPE := 'CA';
v_new_city loc.city%TYPE := 'Montreal';
begin
select max(location_id) into v_loc_id from loc
where country_id =v_country_id;
for i in 1..5
loop
insert into loc(location_id,city,country_id)
values(v_loc_id+v_counter,v_new_city,v_country_id);
v_counter := v_counter +1;

dbms_output.put_line(v_loc_id || ' ' || v_country_id || ' ' || v_new_city);
dbms_output.put_line('Inserted ' || v_counter || ' rows');
end loop;
end;
/





-- continue statement in loop 
declare
v_total simple_integer  :=0;
begin
for i in 1..10
loop
v_total :=v_total +i;
dbms_output.put_line('Total is : ' || v_total);
continue when i>5;
v_total :=v_total+i;
dbms_output.put_line('After continue Total is : ' || v_total);
end loop;
end;
/








--------------------------------------------------------------
-- activity guide practice

begin
for i in 1..10
loop
if i =6 or i=6 then
null;
ELSE
insert into messages(result)
values(i);
end if;
end loop;
end;
/

-- or 

begin
for i in 1..10
loop
if i =6 or i=6 then
null;
ELSE
dbms_output.put_line('Inserting ' || i || ' rows');
end if;
end loop;
end;
/

begin
for i in 1..10
loop
if i =6 or i=6 then
null;
ELSE
dbms_output.put_line('Inserting ' || i || ' rows');
end if;
end loop;
end;
/


create table emp as select * from employees;

alter table emp add (stars varchar2(50));

declare
v_empno emp.employee_id%TYPE :=176;
v_asterisk emp.stars%TYPE :=null;
v_sal emp.salary%TYPE ;
begin
select nvl(round(salary/1000),0) into v_sal 
from emp 
where employee_id =v_empno;
for i in 1..v_sal
loop
v_asterisk := v_asterisk || '*';
end loop;
update emp
set stars =v_asterisk
where employee_id =v_empno;
commit;
end;
/

-- or


DECLARE
  v_empno emp.employee_id%TYPE := 176;
BEGIN
  UPDATE emp
  SET stars = RPAD('*', ROUND(salary/1000), '*')
  WHERE employee_id = v_empno;

  COMMIT;

  DBMS_OUTPUT.PUT_LINE('Stars updated for employee ' || v_empno);
END;
/ 

BEGIN
FOR i IN (select EMPLOYEE_ID,lpad(' ',NVL (ROUND (salary / 1000), 0),'*')asteriks from emp)
LOOP
UPDATE emp
SET starts = i.asteriks
WHERE EMPLOYEE_ID = i.EMPLOYEE_ID;
END LOOP;
END;