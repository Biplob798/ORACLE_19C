-- create procedure by (in mode) parameter 


create or replace procedure raise_salary
(p_id in employees.employee_id%type,
p_percent in number)
is
begin
update employees
set salary=salary*(1+p_percent/100)
where employee_id=p_id;
end raise_salary;
/

execute raise_salary(101,10);
or 
begin
raise_salary(101,10);
end;
/



-- create procedure by (out mode) parameter 

CREATE OR REPLACE PROCEDURE get_emp_count
(p_count OUT NUMBER)
IS
BEGIN
   SELECT COUNT(*) INTO p_count FROM employees;
END;
/
DECLARE
   v_count NUMBER;
BEGIN
   get_emp_count(v_count);
   DBMS_OUTPUT.PUT_LINE('Total Employees = ' || v_count);
END;
/


create or replace procedure quarey_emp
(p_id in employees.employee_id%type,
p_name out employees.last_name%type,
p_salary out employees.salary%type)
is
begin
select last_name,salary into p_name,p_salary from employees
where employee_id=p_id;
end quarey_emp;
/


-- create procedure by (in out mode) parameter 

-- in out mode ta normaly (formet) korar jono beshi bebohar hoya.


create or replace procedure format_phone_number
(p_phone_no in out varchar2)
is 
begin
p_phone_no:='('|| substr(p_phone_no,1,3)||
            ')'|| substr(p_phone_no,4,3)||
            '-'|| substr(p_phone_no,7);  
end format_phone_number;
/


variable b_phone_no varchar2(15)

execute :b_phone_no:='01521436261'

print b_phone_no
execute format_phone_number(:b_phone_no)
print b_phone_no

-- by host/bind variable 

variable b_name varchar2(25);
variable b_sal number;
execute quarey_emp(101, :b_name,:b_sal);
print b_name b_sal

or

DECLARE
v_name employees.last_name%type;
v_salary employees.salary%type;
begin
quarey_emp(101, v_name,v_salary);
DBMS_OUTPUT.PUT_LINE(v_name||v_salary);
end;
/


PASSING PARAMETER BY 
1.POSSITIONAL NOTATION
2.NAMED NOTATION
3.MIXED NOTATION

-- POSSITIONAL NOTATION

create or replace procedure add_dept
(p_name in departments.department_name%type,
p_loc in departments.location_id%type)
is
begin
insert into departments(department_id,department_name,location_id)
values(departments_seq.nextval,p_name,p_loc);
end add_dept;
/


execute add_dept('DOCTOR',3200);

-- NAMED NOTATION

EXECUTE add_dept(p_name => 'ENGINIAR', p_loc => 3300);


-- USNING DEFAULT PARAMETER 

CREATE OR REPLACE PROCEDURE add_dept
(p_name DEPARTMENTS.department_name%TYPE := 'UNKNOWN',
P_LOC DEPARTMENTS.location_id%TYPE DEFAULT 1700)
IS
BEGIN
insert INTO DEPARTMENTS(department_id,department_name,location_id)
values(departments_seq.nextval,p_name,P_LOC);
END add_dept;


-- CALL WITHOUT VALUES 
EXECUTE add_dept;

-- CALL WITH ONE PARAMETER VALUE 
EXECUTE add_dept('ADVIRTISING');


-- CALL WITH TWO PARAMETER VALUE 
EXECUTE add_dept(P_LOC =>1300);


WE CAN CALL A PROCEDURE
1.ANONYMOUS BLOCK
2.ANOTHER PROCEDURE
3.PACKAGE

-- USE PROCEDURE ANOTHER PROCEDURE
CREATE OR REPLACE PROCEDURE PROCESS_EMPLOYEES
IS
CURSOR C_EMP_CURSOR IS
SELECT employee_id
FROM EMPLOYEES;
BEGIN
FOR I IN C_EMP_CURSOR 
LOOP
raise_salary(I.employee_id,10);
END LOOP;
END PROCESS_EMPLOYEES;
/
EXECUTE PROCESS_EMPLOYEES;

SELECT SALARY FROM EMPLOYEES;


-- HANDLED EXCEPTION 

create or replace procedure add_dept
(p_name in departments.department_name%type,
p_loc in departments.location_id%type,
p_mgr in departments.Manager_id%type)
is
begin
insert into departments(department_id,department_name,location_id,Manager_id)
values(departments_seq.nextval,p_name,p_loc,p_mgr);
EXCEPTION
WHEN OTHERS then
DBMS_OUTPUT.PUT_LINE('ERROR : ADDING DEPT : ' || P_NAME);
end add_dept;
/

CREATE OR REPLACE PROCEDURE CREATE_DEPTARTMENTS IS
BEGIN
add_dept('MEDIA', 100,1800);
add_dept('EDITING',101, 1800);
add_dept('MEDIA', 110,1800);
END;